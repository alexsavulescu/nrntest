// -np 5
{load_file("nrngui.hoc")}
{load_file("ms4.ses")}

objref pc
pc = new ParallelContext()
{load_file("msout.hoc")}

{cvode_active(cv)}
{pc.nthread(nt)}
if (pc.id == 0) {
  printf("nthread %d   split %d   cvode %d\n", pc.nthread(), s, cvode_active())
}

// test groups are
objref groups, sids
{
groups = new List()
for i=0, 4 groups.append(new Vector())
groups.object(0).append(0,13,14)
groups.object(1).append(1,3,4)
groups.object(2).append(2,5,6)
groups.object(3).append(7,8,9)
groups.object(4).append(10,11,12)
sids = new Vector() // quaduples of sid, section index, connection value, short
sids.append(0,0,0,1, 1,0,1,1, 0,1,0,0, 0,2,0,0, 1,7,0,0, 1,10,0,0)
}

proc split() {local i, j  localobj g
	for i=0, groups.count-1 {
		g = groups.object(i)
		a[g.x[0]] disconnect()
		if (pc.id != (i % pc.nhost)) for j=0, g.size-1 {
			a[g.x[j]] {
				delete_section()
			}
		}
	}
	for (i=0; i < sids.size-1; i += 4) {
		if (section_exists("a", sids.x[i+1])) a[sids.x[i+1]] {
			pc.multisplit(sids.x[i+2], sids.x[i])
//printf("%d %s multisplit(%g, %d)\n", pc.id, secname(), sids.x[i+2], sids.x[i])
		}
	}
}
if (s) {split()}
record_all()

if (s) {pc.multisplit()}
//pc.multisplit(0,1001)
if (1) {
	run()
}else{
  //multisplit or gap junctions do not work in presence of some kinds of events
  pc.set_maxstep(1)
  stdinit()
  pc.psolve(tstop)
}

precord_all("%g")

if (1) {
  pc.runworker()
  pc.done()
  quit()
}
