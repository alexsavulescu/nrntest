// parallel transfer test when sid used for several targets
// sid for voltage of soma(.5) same as gid
// gid 0 and 1 have nmid cells between them.
// 0 and 1 are connected by gap junctions to all nmid cells

start = startsw()
{load_file("nrngui.hoc")}
objref pc
pc = new ParallelContext()

nrnpython("from gap_verify import *")
objref po
po = new PythonObject()

begintemplate Cell
public soma
create soma
proc init() {
  soma {
    L = 10  diam = 100/(PI*L)
    insert hh
  }
}
endtemplate Cell

rgap = 10000 // Mohm default

nmid = 4
ncell = nmid + 2
objref cells[2+nmid], gaps

iterator celliter() { local gid
  for (gid = pc.id; gid < ncell; gid += pc.nhost) {
    $&1 = gid
    iterator_statement
  }
}

proc mkcells() {local gid  localobj nc, nil
  for celliter(&gid) {
    cells[gid] = new Cell()
    pc.set_gid2node(gid, pc.id)
    cells[gid].soma nc = new NetCon(&v(.5), nil)
    pc.cell(gid, nc, 1)
  }
}

proc mkgaps() { local gid, i  localobj gap
  gaps = new List()
  // sources
  for celliter(&gid) {
    pc.source_var(&cells[gid].soma.v(.5), gid)
    cells[gid].soma po.source_var(.5,gid)
  }
  // targets
  for celliter(&gid) {
    if (gid > 1) { // gap between gid and 0, 1
      for i=0, 1 {
	cells[gid].soma gap = new HalfGap(.5)
        pc.target_var(gap, &gap.vgap, i)
        po.target_var(gap, i)
        gap.r = rgap
        gaps.append(gap)
      }
    }else{ // gap between gid and all nmid cells
      for i=2, ncell-1 {
        cells[gid].soma gap = new HalfGap(.5)
        pc.target_var(gap, &gap.vgap, i)
        po.target_var(gap, i)
        gap.r = rgap
        gaps.append(gap)
      }
    }
  }
  pc.setup_transfer()
}

mkcells()
mkgaps()

objref stim
if (1) if (pc.gid_exists(0)) {
  pc.gid2cell(0).soma stim = new IClamp(.5)
  stim.dur = .1
  stim.amp = .3
}

objref spikevec, gidvec
spikevec = new Vector()
gidvec = new Vector()
proc recspike() { local gid
  for celliter(&gid) {
    pc.spike_record(gid, spikevec, gidvec)
  }
}
recspike()

{cvode_active(cv)}
{pc.nthread(nt)}
if (pc.id == 0) {
  printf("nthread=%d  cvode=%d\n", pc.nthread(), cvode.active())
}
tstop = 10

{load_file("test2.ses")}
cvode.cache_efficient(1)
proc prun() {
  pc.set_maxstep(100)
  po.setup_transfer_verify()
  stdinit()
pc.psolve(tstop)
//continuerun(tstop)
}

prun()

proc prspike() {local i, rank  localobj f
  f = new File("out.dat")
  if (pc.id == 0) {
    f.wopen()
    f.close()
  }
  pc.barrier()
  for rank = 0, pc.nhost-1 if (rank == pc.id()) {
    f.aopen()
    for i=0, gidvec.size-1 {
      f.printf("%g %d\n", spikevec.x[i], gidvec.x[i])
    }
    f.close()
    pc.barrier()
  }
}
prspike()

{pc.runworker()}
{pc.done()}
print "total time ", startsw() - start
{quit()}
