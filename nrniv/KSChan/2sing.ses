{load_file("nrngui.hoc")}
objectvar save_window_, rvp_
objectvar scene_vector_[7]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

//Begin ChannelBuild[0] managed KSChan[0]
{
load_file("chanbild.hoc", "ChannelBuild")
}
{ocbox_ = new ChannelBuild(0)}
{object_push(ocbox_)}
{genprop.set_data("Test", 0, 1, -1, "NonSpecific")}
{genprop.set_defstr(0, 0)}
tobj = new ChannelBuildKSGate(this)
{gatelist.append(tobj)}
{tobj.begin_restore(1)}
{tobj.set_state("C", 0, 100, 110)}
{tobj.set_state("O", 1, 150, 110)}
{tobj.set_trans(0, 1, 1)}
{tobj.transitions.object(0).settype(1, "")}
{tobj1 = new Vector(3)  for (i=0; i < 3; i += 1) tobj1.x[i] = fscan() }
1
-0.198295
-39.3703
{tobj.transitions.object(0).set_f(0, 4, tobj1)}
{tobj1 = new Vector(1)  for (i=0; i < 1; i += 1) tobj1.x[i] = fscan() }
1
{tobj.transitions.object(0).set_f(1, 1, tobj1)}
{tobj.end_restore()}
end_restore()
{genprop.set_single(1)}
{object_pop()}
{
ocbox_.map("ChannelBuild[0] managed KSChan[0]", 29, 540, 230.4, 273.6)
}
objref ocbox_
//End ChannelBuild[0] managed KSChan[0]


//Begin SingleCompartment
{
load_file("single.hoc")
}
ocbox_ = new SingleCompartment(0)
ocbox_.inserter = new Inserter(0)
{object_push(ocbox_.inserter)}
{
}
{object_pop() doNotify()}
{object_push(ocbox_)}
{inserter.v1.map()}
{endbox()}
{object_pop() doNotify()}
{
ocbox_ = ocbox_.vbox
ocbox_.map("SingleCompartment", 400, 62, 91.2, 96)
}
objref ocbox_
//End SingleCompartment


//Begin PointProcessManager
{
load_file("pointman.hoc")
}
{
soma ocbox_ = new PointProcessManager(0)
}
{object_push(ocbox_)}
{
mt.select("SEClamp") i = mt.selected()
ms[i] = new MechanismStandard("SEClamp")
ms[i].set("rs", 0.1, 0)
ms[i].set("dur1", 1, 0)
ms[i].set("amp1", -65, 0)
ms[i].set("dur2", 2, 0)
ms[i].set("amp2", 10, 0)
ms[i].set("dur3", 100, 0)
ms[i].set("amp3", -65, 0)
mt.select("SEClamp") i = mt.selected() maction(i)
hoc_ac_ = 0.5
sec.sec move() d1.flip_to(0)
}
{object_pop() doNotify()}
{
ocbox_ = ocbox_.v1
ocbox_.map("PointProcessManager", 254, 191, 236.16, 433.92)
}
objref ocbox_
//End PointProcessManager


//Begin PointProcessManager
{
load_file("pointman.hoc")
}
{
soma ocbox_ = new PointProcessManager(0)
}
{object_push(ocbox_)}
{
mt.select("Test") i = mt.selected()
ms[i] = new MechanismStandard("Test")
ms[i].set("Nsingle", 1, 0)
ms[i].set("gmax", 0.1, 0)
ms[i].set("e", 0, 0)
mt.select("Test") i = mt.selected() maction(i)
hoc_ac_ = 0.5
sec.sec move() d1.flip_to(0)
}
{object_pop() doNotify()}
{
ocbox_ = ocbox_.v1
ocbox_.map("PointProcessManager", 285, 360, 222.72, 373.44)
}
objref ocbox_
//End PointProcessManager

{
xpanel("RunControl", 0)
v_init = -65
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 5
xvalue("t","t", 2 )
tstop = 5
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.025
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 40
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
xcheckbox("Quiet",&stdrun_quiet,"")
realtime = 0
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(24,149)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5,-80,40)
scene_vector_[4] = save_window_
{save_window_.view(0, -80, 5, 120, 519, 60, 300.48, 200.32)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5,-1,1)
scene_vector_[5] = save_window_
{save_window_.view(0, -1, 5, 2, 518, 328, 300.48, 200.32)}
graphList[1].append(save_window_)
save_window_.save_name("graphList[1].")
save_window_.addvar("SEClamp[0].i", 1, 1, 0.432588, 0.957508, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5,0,0.1)
scene_vector_[6] = save_window_
{save_window_.view(0, 0, 5, 0.1, 519, 599, 300.48, 200.32)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addexpr("Test[0].g", 1, 1, 0.8, 0.9, 2)
}

//Begin VariableTimeStep
{
ocbox_ = NumericalMethodPanel[0]
}
{object_push(ocbox_)}
{
atol_ = 0.001  CVode[0].atol(atol_)
restore(1, 1)
}
{object_pop()}
{
ocbox_.map("VariableTimeStep", 873, 59, 272.64, 113.28)
}
objref ocbox_
//End VariableTimeStep

objectvar scene_vector_[1]
{doNotify()}
