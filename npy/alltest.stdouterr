allsec.py
	0 
	0 
	0 
	0 
soma 1 -70
hillock 4 -70
axon 5 -70
myelin[0] 5 -70
myelin[1] 5 -70
myelin[2] 5 -70
myelin[3] 5 -70
myelin[4] 5 -70
myelin[5] 5 -70
node[0] 1 -70
node[1] 1 -70
node[2] 1 -70
node[3] 1 -70
node[4] 1 -70
node[5] 1 -70
dend[0] 27 -70
dend[1] 27 -70
dend[2] 27 -70
soma 1 -70
hillock 4 -70
axon 5 -70
myelin[0] 5 -70
myelin[1] 5 -70
myelin[2] 5 -70
myelin[3] 5 -70
myelin[4] 5 -70
myelin[5] 5 -70
node[0] 1 -70
node[1] 1 -70
node[2] 1 -70
node[3] 1 -70
node[4] 1 -70
node[5] 1 -70
dend[0] 27 -70
dend[1] 27 -70
dend[2] 27 -70
>>> cvevent.py
0.0
0.09999999999999999
0.20000000000000004
0.3000000000000001
0.4000000000000002
0.5000000000000002
0.5999999999999999
0.6999999999999995
0.7999999999999992
0.8999999999999988
0.9999999999999984
1.099999999999998
1.1999999999999977
1.2999999999999974
1.399999999999997
1.4999999999999967
1.5999999999999963
1.699999999999996
1.7999999999999956
1.8999999999999952
1.999999999999995
2.099999999999996
2.1999999999999975
2.299999999999999
2.4000000000000004
2.5000000000000018
2.600000000000003
2.7000000000000046
2.800000000000006
2.9000000000000075
3.000000000000009
3.1000000000000103
3.2000000000000117
3.300000000000013
3.4000000000000146
3.500000000000016
3.6000000000000174
3.700000000000019
3.8000000000000203
3.9000000000000217
4.000000000000023
4.1000000000000245
4.200000000000026
4.300000000000027
4.400000000000029
4.50000000000003
4.600000000000032
4.700000000000033
4.8000000000000345
4.900000000000036
5.000000000000037
>>> alias.py
3 3 3
5 5 5
7 7 7
9 9 9
>>> allsec.py
nrniv: demo undefined function
 near line 1
 demo(2)
        ^
        demo(2)
>>> allseg.py
0.0
0.1
0.3
0.5
0.7
0.9
1.0
0.0
0.1
0.3
0.5
0.7
0.9
1.0
>>> alltoallleak.py
0 59655280
150 288
300 64
arayerr.py
>>> assign.py
PythonObject[0] PythonObject[4] PythonObject[5] Vector[0] NULLobject
(2.0, 10.0, 'hello', {}, [], List[0], 25, 'goodbye', None)
({}, 25, 'another', Vector[0], None)
	69 
>>> basic2.py
Vector[0]
4
I am a MyVector
List[0]
0
Vector[1]
(Vector[1], 'resize to', 2)
Vector[1]
2
I am a My2Vector
['one', 'two']
two
three
override x
v
changed z
changed y
5
Vector[1].x[?]
0.5
0	0	0	0	
0	0	0	0	
0	0	
0	0	
0	0.5	
>>> Traceback (most recent call last):
  File "basic2.py", line 66, in <module>
    print((v.x[1]))
TypeError: 'int' object is not subscriptable
basic.py
10	11	12	13	14	

NULLobject
True
0.0
0.0
0.0
10.0
11.0
12.0
13.0
14.0
(o[0][?], List[0], Vector[1], 0.0)
(o[0][?], List[0], Vector[1], 1.0)
(o[0][?], List[0], Vector[1], 2.0)
(o[0][?], List[0], Vector[2], 10.0)
(o[0][?], List[0], Vector[2], 11.0)
(o[0][?], List[0], Vector[2], 12.0)
(o[0][?], List[0], Vector[3], 20.0)
(o[0][?], List[0], Vector[3], 21.0)
(o[0][?], List[0], Vector[3], 22.0)
(o[0][?], List[1], Vector[4], 100.0)
(o[0][?], List[1], Vector[4], 101.0)
(o[0][?], List[1], Vector[4], 102.0)
(o[0][?], List[1], Vector[5], 110.0)
(o[0][?], List[1], Vector[5], 111.0)
(o[0][?], List[1], Vector[5], 112.0)
(o[0][?], List[1], Vector[6], 120.0)
(o[0][?], List[1], Vector[6], 121.0)
(o[0][?], List[1], Vector[6], 122.0)
(o[0][?], List[2], Vector[7], 200.0)
(o[0][?], List[2], Vector[7], 201.0)
(o[0][?], List[2], Vector[7], 202.0)
(o[0][?], List[2], Vector[8], 210.0)
(o[0][?], List[2], Vector[8], 211.0)
(o[0][?], List[2], Vector[8], 212.0)
(o[0][?], List[2], Vector[9], 220.0)
(o[0][?], List[2], Vector[9], 221.0)
(o[0][?], List[2], Vector[9], 222.0)
(o[1][?], List[3], Vector[10], 1000.0)
(o[1][?], List[3], Vector[10], 1001.0)
(o[1][?], List[3], Vector[10], 1002.0)
(o[1][?], List[3], Vector[11], 1010.0)
(o[1][?], List[3], Vector[11], 1011.0)
(o[1][?], List[3], Vector[11], 1012.0)
(o[1][?], List[3], Vector[12], 1020.0)
(o[1][?], List[3], Vector[12], 1021.0)
(o[1][?], List[3], Vector[12], 1022.0)
(o[1][?], List[4], Vector[13], 1100.0)
(o[1][?], List[4], Vector[13], 1101.0)
(o[1][?], List[4], Vector[13], 1102.0)
(o[1][?], List[4], Vector[14], 1110.0)
(o[1][?], List[4], Vector[14], 1111.0)
(o[1][?], List[4], Vector[14], 1112.0)
(o[1][?], List[4], Vector[15], 1120.0)
(o[1][?], List[4], Vector[15], 1121.0)
(o[1][?], List[4], Vector[15], 1122.0)
(o[1][?], List[5], Vector[16], 1200.0)
(o[1][?], List[5], Vector[16], 1201.0)
(o[1][?], List[5], Vector[16], 1202.0)
(o[1][?], List[5], Vector[17], 1210.0)
(o[1][?], List[5], Vector[17], 1211.0)
(o[1][?], List[5], Vector[17], 1212.0)
(o[1][?], List[5], Vector[18], 1220.0)
(o[1][?], List[5], Vector[18], 1221.0)
(o[1][?], List[5], Vector[18], 1222.0)
3
5
(o[?], 2)
(o[1][?], 3)
(List[5], 3)
(Vector[17], 3)
(Vector[0], 12.0)
('number of hoc List instances ', 6)
List[0]
List[1]
List[2]
List[3]
List[4]
List[5]
List[0]
List[1]
List[2]
List[3]
List[5]
>>> bb.py
5
>>> bool.py
True
True
True
True
True
False
True
>>> Traceback (most recent call last):
  File "bool.py", line 23, in <module>
    print(([len(b), bool(b)] == [0, True]))
TypeError: Most HocObject have no len()
bug1.py
[1, 2, 3]
('a', 'b', 'c')
{'a': 1, 'b': 2, 'c': 3}
PythonObject[0] 
PythonObject[1] 
PythonObject[2] 
>>> bug2.py
__nrnsec_0x55e1aa28fd70
__nrnsec_0x55e1aa28fd70
('  x = ', 0.16666666666666666, '  v = ', -65.0, '  diam = ', 500.0, '  cm = ', 1.0)
('   ', 'k_ion')
('   ', 'na_ion')
('   ', 'hh')
('      gnabar = ', 0.12)
('  x = ', 0.5, '  v = ', -65.0, '  diam = ', 500.0, '  cm = ', 1.0)
('   ', 'k_ion')
('   ', 'na_ion')
('   ', 'hh')
('      gnabar = ', 0.12)
('  x = ', 0.8333333333333333, '  v = ', -65.0, '  diam = ', 500.0, '  cm = ', 1.0)
('   ', 'k_ion')
('   ', 'na_ion')
('   ', 'hh')
('      gnabar = ', 0.12)
(-30.0, -20.0)
(-30.0, -20.0)
(1000000000.0, 1000000000.0, 0.0, 0.0, 1000000000.0, 1000000000.0)
0.0
>>> bug4.py
PythonObject[0] 
	0 
>>> bug5.py
125.0
125.0
125 
>>> bug7.py
Vector[0].c()
Vector[0].c()
print (v2.size())
<class 'TypeError'>: No hoc method for a callable. Missing parentheses before the '.'?
>>> bugunref1.py
0
1
Vector[0] Vector[1] 
Vector[2] Vector[3] 
Vector[4] Vector[5] 
Vector[6] Vector[7] 
Vector[8] Vector[9] 
>>> callbackerr.py
nrniv: Python Callback failed
 near line 0
 ^
        finitialize(-65)
      init()
    stdinit()
Traceback (most recent call last):
  File "callbackerr.py", line 6, in callback1
    1/0
ZeroDivisionError: division by zero
callback1: t=0.0
>>> Traceback (most recent call last):
  File "callbackerr.py", line 15, in <module>
    h.stdinit()
RuntimeError: hoc error
cas.py
soma
axon
dend[1]
axon
soma
soma
axon
>>> compare_test.py

                          Test      Value  Expected  Result
-----------------------------------------------------------
                          a==a       True      True  passed
                          a==b      False     False  passed
                          a!=b       True      True  passed
                          d==c       True      True  passed
          h._ref_t == h._ref_t       True      True  passed
           h._ref_t < h._ref_t      False     False  passed
       h._ref_t == v._ref_x[0]      False     False  passed
        h._ref_z1 == h._ref_z1       True      True  passed
        h._ref_z1 == h._ref_z2      False     False  passed
  h.Vector().x == h.Vector().x      False     False  passed
h.Vector(5).x == h.Vector(3).x      False     False  passed
           h.x[1] == h.x[1][0]      False     False  passed
              h.x[1] == h.y[1]      False     False  passed
          h.xpanel == h.xpanel       True      True  passed
          h.xpanel == h.xvalue      False     False  passed
            h.xaxis == g.xaxis      False     False  passed
            g.xaxis == g.xaxis       True      True  passed
           g.xaxis == g2.xaxis      False     False  passed
                       g != g2       True      True  passed
>>> createdelete.py

|-|       __nrnsec_0x55db1e1fb8b0(0-1)

	1 


	1 
>>> cvevent.py
nrniv: demo undefined function
 near line 1
 demo(3)
        ^
        demo(3)
>>> Traceback (most recent call last):
  File "cvevent.py", line 19, in <module>
    h.run()
AttributeError: 'hoc.HocObject' object has no attribute 'run'
distinctseg.py
0.1
0.30000000000000004
0.5
0.7
0.8999999999999999
__nrnsec_0x558badeef560(0.1) 0.1
__nrnsec_0x558badeef560(0.3) 0.30000000000000004
__nrnsec_0x558badeef560(0.5) 0.5
__nrnsec_0x558badeef560(0.7) 0.7
__nrnsec_0x558badeef560(0.9) 0.8999999999999999
>>> dll.py
1.0
>>> e.py
>>> execute.py
['soma', 'axon', 'dend[0]', 'dend[1]', 'dend[2]']
	1 
>>> fixbug.py
None
>>> get_segment.py
soma 0.5
None
dend dend dend 0.9
>>> gui1.py
>>> gui2.py
>>> hh1.py
__nrnsec_0x5623e5ec9010 0.12
for seg in cable.allseg()
__nrnsec_0x5623e5ec9010(0) 0.0
__nrnsec_0x5623e5ec9010(0.1) 0.1
0.1 0.12 -65.0
__nrnsec_0x5623e5ec9010(0.3) 0.3
0.3 0.12 -65.0
__nrnsec_0x5623e5ec9010(0.5) 0.5
0.5 0.12 -65.0
__nrnsec_0x5623e5ec9010(0.7) 0.7
0.7 0.12 -65.0
__nrnsec_0x5623e5ec9010(0.9) 0.9
0.9 0.12 -65.0
__nrnsec_0x5623e5ec9010(1) 1.0
for seg in cable
0.1 0.12 -65.0
0.30000000000000004 0.12 -65.0
0.5 0.12 -65.0
0.7 0.12 -65.0
0.8999999999999999 0.12 -65.0
triple loop over 2 segs of cable
0.25 0.25 0.25
0.25 0.25 0.75
0.25 0.75 0.25
0.25 0.75 0.75
0.75 0.25 0.25
0.75 0.25 0.75
0.75 0.75 0.25
0.75 0.75 0.75
alternating triple loop of cable
0.0 0.25 0.0
0.0 0.25 0.25
0.0 0.25 0.75
0.0 0.25 1.0
0.0 0.75 0.0
0.0 0.75 0.25
0.0 0.75 0.75
0.0 0.75 1.0
0.25 0.25 0.0
0.25 0.25 0.25
0.25 0.25 0.75
0.25 0.25 1.0
0.25 0.75 0.0
0.25 0.75 0.25
0.25 0.75 0.75
0.25 0.75 1.0
0.75 0.25 0.0
0.75 0.25 0.25
0.75 0.25 0.75
0.75 0.25 1.0
0.75 0.75 0.0
0.75 0.75 0.25
0.75 0.75 0.75
0.75 0.75 1.0
1.0 0.25 0.0
1.0 0.25 0.25
1.0 0.25 0.75
1.0 0.25 1.0
1.0 0.75 0.0
1.0 0.75 0.25
1.0 0.75 0.75
1.0 0.75 1.0
alternating triple loop of cable
0.25 0.0 0.25
0.25 0.0 0.75
0.25 0.25 0.25
0.25 0.25 0.75
0.25 0.75 0.25
0.25 0.75 0.75
0.25 1.0 0.25
0.25 1.0 0.75
0.75 0.0 0.25
0.75 0.0 0.75
0.75 0.25 0.25
0.75 0.25 0.75
0.75 0.75 0.25
0.75 0.75 0.75
0.75 1.0 0.25
0.75 1.0 0.75
>>> hh2.py
-65	-64.9993	-64.9985	-64.9978	-64.9971	
-64.9964	-64.9957	-64.995	-64.9943	-64.9936	
-64.993	-64.9923	-64.9917	-64.991	-64.9904	
-64.9898	-64.9891	-64.9885	-64.9879	-64.9873	
-64.9867	-64.9861	-64.9855	-64.9849	-64.9843	
-64.9837	-64.9831	-64.9826	-64.982	-64.9814	
-64.9809	-64.9803	-64.9798	-64.9792	-64.9787	
-64.9782	-64.9776	-64.9771	-64.9766	-64.9761	
-64.9755	-64.975	-64.9745	-64.974	-64.9735	
-64.9731	-64.9726	-64.9721	-64.9716	-64.9712	
-64.9707	-64.9702	-64.9698	-64.9693	-64.9689	
-64.9684	-64.968	-64.9676	-64.9671	-64.9667	
-64.9663	-64.9659	-64.9655	-64.9651	-64.9647	
-64.9643	-64.9639	-64.9635	-64.9631	-64.9628	
-64.9624	-64.962	-64.9617	-64.9613	-64.961	
-64.9606	-64.9603	-64.9599	-64.9596	-64.9593	
-64.959	-64.9586	-64.9583	-64.958	-64.9577	
-64.9574	-64.9571	-64.9568	-64.9565	-64.9563	
-64.956	-64.9557	-64.9555	-64.9552	-64.9549	
-64.9547	-64.9544	-64.9542	-64.9539	-64.9537	
-64.9535	-64.9533	-64.953	-64.9528	-64.9526	
-64.9524	-64.9522	-64.952	-64.9518	-64.9516	
-64.9514	-64.9512	-64.9511	-64.9509	-64.9507	
-64.9505	-64.9504	-64.9502	-64.9501	-64.9499	
-64.9498	-64.9496	-64.9495	-64.9494	-64.9492	
-64.9491	-64.949	-64.9489	-64.9488	-64.9487	
-64.9486	-64.9485	-64.9484	-64.9483	-64.9482	
-64.9481	-64.948	-64.9479	-64.9478	-64.9478	
-64.9477	-64.9476	-64.9476	-64.9475	-64.9475	
-64.9474	-64.9474	-64.9473	-64.9473	-64.9473	
-64.9472	-64.9472	-64.9472	-64.9471	-64.9471	
-64.9471	-64.9471	-64.9471	-64.9471	-64.9471	
-64.9471	-64.9471	-64.9471	-64.9471	-64.9471	
-64.9471	-64.9471	-64.9471	-64.9472	-64.9472	
-64.9472	-64.9472	-64.9473	-64.9473	-64.9473	
-64.9474	-64.9474	-64.9475	-64.9475	-64.9476	
-64.9476	-64.9477	-64.9477	-64.9478	-64.9479	
-64.9479	-64.948	-64.9481	-64.9481	-64.9482	
-64.9483	-64.9484	-64.9485	-64.9485	-64.9486	
-64.9487	-64.9488	-64.9489	-64.949	-64.9491	
-64.9492	
>>> hh.py
soma
k_ion k_ion
na_ion na_ion
hh hh
0.12
pas pas
k_ion k_ion
na_ion na_ion
hh hh
	1 
>>> hobjcontext2.py
callback
6.0
4.0
6.0
callback
6.0
4.0
6.0
ok so far
callback
6.0
4.0
6.0
>>> hobjcontext.py
4.0
hello
List[0]
25.0
Vector[0]
16.0
>>> hoc2py.py
a =  2
pi =  3.14159
Hello World
v =  -70
>>> hocac.py
3.141592653589793
>>> kschan.py
>>> mechdir.py
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'el', 'gk', 'gkbar', 'gl', 'gna', 'gnabar', 'h', 'il', 'is_ion', 'm', 'n', 'name', 'segment']
>>> mechvars.py
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'el', 'gk', 'gkbar', 'gl', 'gna', 'gnabar', 'h', 'il', 'is_ion', 'm', 'n', 'name', 'segment']
>>> missingindex.py
nrniv: wrong # of subscripts d
 near line 11
 proc init() { a = 5 d[0] = 50 d[1] = 51}
                          ^
print (h.a)
10.0
print (h.b.a)
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
print (h.b[0].a)
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
print (h.b.f())
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
print (h.b[0].f())
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
print (h.b.b.b.b.a)
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
print (h.f.a)
<class 'TypeError'>: No hoc method for a callable. Missing parentheses before the '.'?
print (h.b[0].f.a)
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
print (h.d.a)
<class 'TypeError'>: Missing array index
print (h.d[0].a)
<class 'TypeError'>: Missing array index
print (h.d[0][0].a)
<class 'AttributeError'>: 'float' object has no attribute 'a'
print (h.b[0].d.a)
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
print (h.b[0].d[0].a)
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
h.b.__dict__
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
h.b.__doc__
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
h.b[0].d.__dict__
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
h.b[0].d.__doc__
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute 'b'
>>> mname.py
h.__nrnsec_0x55fcd8758d70(0.5).k_ion.dik_dv_ = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).dik_dv_ = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).k_ion.ek = -77.0
h.__nrnsec_0x55fcd8758d70(0.5).ek = -77.0
h.__nrnsec_0x55fcd8758d70(0.5).k_ion.ik = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).ik = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).k_ion.ki = 54.4
h.__nrnsec_0x55fcd8758d70(0.5).ki = 54.4
h.__nrnsec_0x55fcd8758d70(0.5).k_ion.ko = 2.5
h.__nrnsec_0x55fcd8758d70(0.5).ko = 2.5
h.__nrnsec_0x55fcd8758d70(0.5).na_ion.dina_dv_ = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).dina_dv_ = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).na_ion.ena = 50.0
h.__nrnsec_0x55fcd8758d70(0.5).ena = 50.0
h.__nrnsec_0x55fcd8758d70(0.5).na_ion.ina = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).ina = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).na_ion.nai = 10.0
h.__nrnsec_0x55fcd8758d70(0.5).nai = 10.0
h.__nrnsec_0x55fcd8758d70(0.5).na_ion.nao = 140.0
h.__nrnsec_0x55fcd8758d70(0.5).nao = 140.0
h.__nrnsec_0x55fcd8758d70(0.5).hh.el = -54.3
h.__nrnsec_0x55fcd8758d70(0.5).el_hh = -54.3
h.__nrnsec_0x55fcd8758d70(0.5).hh.gk = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).gk_hh = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).hh.gkbar = 0.036
h.__nrnsec_0x55fcd8758d70(0.5).gkbar_hh = 0.036
h.__nrnsec_0x55fcd8758d70(0.5).hh.gl = 0.0003
h.__nrnsec_0x55fcd8758d70(0.5).gl_hh = 0.0003
h.__nrnsec_0x55fcd8758d70(0.5).hh.gna = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).gna_hh = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).hh.gnabar = 0.12
h.__nrnsec_0x55fcd8758d70(0.5).gnabar_hh = 0.12
h.__nrnsec_0x55fcd8758d70(0.5).hh.h = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).h_hh = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).hh.il = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).il_hh = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).hh.m = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).m_hh = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).hh.n = 0.0
h.__nrnsec_0x55fcd8758d70(0.5).n_hh = 0.0
>>> msparse.py
0 
1   2:100

2   2:200

>>> mulinher.py
>>> Traceback (most recent call last):
  File "mulinher.py", line 39, in <module>
    class F(D, B, C, A): pass
  File "<string>", line 12, in __new__
TypeError: Multiple Inheritance of HocObject in F through B,A not allowed
ncthresh.py
30.025000000098828 -19.97500000000117
30.025	
>>> netcon1.py
>>> nmodlcode.py
morphology : 
capacitance : 
pas : TITLE passive membrane channel
extracellular : 
fastpas : 
na_ion : 
k_ion : 
hh : TITLE hh.mod   squid sodium, potassium, and leak channels
IClamp : COMMENT
AlphaSynapse : COMMENT
ExpSyn : NEURON {
Exp2Syn : COMMENT
SEClamp : TITLE svclmp.mod
VClamp : COMMENT
OClamp : COMMENT
APCount : NEURON {
NetStim : : $Id: netstim.mod 2212 2008-09-08 14:32:26Z hines $
IntFire1 : NEURON {
IntFire2 : : total current is ib + weighted events that decay with time constant taus
IntFire4 : COMMENT
PointProcessMark : : for the purpose of displaying a location on a Shape
PatternStim : : The spikeout pairs (t, gid) resulting from a parallel network simulation
>>> nosim.py
simulate all
cache_efficient is 1
s0
s1
s2
s3
s4
nrn.Section.simulate method not available (not merged from do-not simulate branch?)

|-|       s0(0-1)
|-|       s1(0-1)
|-|       s2(0-1)
|-|       s3(0-1)
|-|       s4(0-1)

nrndir.py
rallbranch =  2.0
['L', 'Ra', '__call__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'allseg', 'arc3d', 'cell', 'children', 'connect', 'diam3d', 'has_membrane', 'hname', 'hoc_internal_name', 'insert', 'is_pysec', 'n3d', 'name', 'nseg', 'orientation', 'parentseg', 'psection', 'pt3dadd', 'pt3dchange', 'pt3dclear', 'pt3dinsert', 'pt3dremove', 'pt3dstyle', 'push', 'rallbranch', 'same', 'spine3d', 'subtree', 'trueparentseg', 'uninsert', 'wholetree', 'x3d', 'y3d', 'z3d']
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'area', 'cm', 'diam', 'extracellular', 'hh', 'k_ion', 'na_ion', 'node_index', 'point_processes', 'ri', 'sec', 'v', 'volume', 'x']
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'el', 'gk', 'gkbar', 'gl', 'gna', 'gnabar', 'h', 'il', 'is_ion', 'm', 'n', 'name', 'segment']
density mechanisms
extracellular
k_ion
na_ion
hh
point processes
Exp2Syn[0]
ExpSyn[0]
IClamp[1]
IClamp[0]
>>> numbercheck.py
bad stack access: expecting (double); really (Object *)
nrniv: interpreter stack type error
 near line 0
 objref hoc_obj_[2]
                   ^
bad stack access: expecting (double); really (Object *)
nrniv: interpreter stack type error
 near line 0
 ^
h.abs(numpy.arange(10,11))
<class 'RuntimeError'>: hoc error
10.0
h.abs(0j)
<class 'RuntimeError'>: hoc error
(10+2j)
oc_restore_code tobj_count=1 should be 0
oc_restore_code tobj_count=2 should be 1
>>> objsec1.py

|-|       Cell.soma(0-1)
   `----------|       Cell.axon(0-1)
 `--|       __nrnsec_0x55567759ea40(0-1)
 `--|       __nrnsec_0x55567759eaa0(0-1)
 `--|       __nrnsec_0x55567759eb00(0-1)

>>> prax_test.py
e=0 x=10 y=-5

>>> py2nrn1.py
>>> pysecname.py
_pysec.soma _pysec.soma
_pysec.dend _pysec.dend
_pysec.aden[0] _pysec.aden[0]
_pysec.aden[1] _pysec.aden[1]
_pysec.aden[2] _pysec.aden[2]
_pysec.aden[3] _pysec.aden[3]
__nrnsec_0x5602da41d950 __nrnsec_0x5602da41d950
apical apical
hoc _pysec.soma
hoc _pysec.dend
hoc _pysec.aden[0]
hoc _pysec.aden[1]
hoc _pysec.aden[2]
hoc _pysec.aden[3]
hoc __nrnsec_0x5602da41d950
hoc apical
('soma', '_pysec.soma', '_pysec.soma', '__nrnsec_0x5602da41d710')
('dend', '_pysec.dend', '_pysec.dend', '__nrnsec_0x5602da41d770')
('aden[0]', '_pysec.aden[0]', '_pysec.aden[0]', '__nrnsec_0x5602da41d7d0')
('aden[1]', '_pysec.aden[1]', '_pysec.aden[1]', '__nrnsec_0x5602da41d830')
('aden[2]', '_pysec.aden[2]', '_pysec.aden[2]', '__nrnsec_0x5602da41d890')
('aden[3]', '_pysec.aden[3]', '_pysec.aden[3]', '__nrnsec_0x5602da41d8f0')
('__nrnsec_0x5602da41d950', '__nrnsec_0x5602da41d950', '__nrnsec_0x5602da41d950', '__nrnsec_0x5602da41d950')
('apical', 'apical', 'apical', '__nrnsec_0x5602da41d9b0')
>>> recording_test.py
hoc record() v
python record() v
python record() i_pas
python record() pas.i
	Vector[0] 
-65	-65.4488	-65.8567	-66.2276	-66.5648	
-66.8713	-67.1499	-67.4032	-67.6335	-67.8428	
-68.0332	
-65	-65.4488	-65.8567	-66.2276	-66.5648	
-66.8713	-67.1499	-67.4032	-67.6335	-67.8428	
-68.0332	
0.005	0.005	0.00455124	0.00414328	0.00377241	
0.00343525	0.00312874	0.0028501	0.00259678	0.0023665	
0.00215715	
0.005	0.005	0.00455124	0.00414328	0.00377241	
0.00343525	0.00312874	0.0028501	0.00259678	0.0023665	
0.00215715	
>>> rvarray.py
(1.0, 2.0, 0.1, 0.1, 0.2)
(1.0, 2.0, 0.30000000000000004, 0.30000000000000004, 0.6000000000000001)
(1.0, 2.0, 0.5, 0.5, 1.0)
(1.0, 2.0, 0.7, 0.7, 1.4)
(1.0, 2.0, 0.8999999999999999, 0.8999999999999999, 1.7999999999999998)
>>> rverr.py
print sec(.5).vext[5]
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(.5).vext[1]
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(.5).vext[5]
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(.5).vext[5]
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(.5).gnabar_hh[0]
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(.5).foo
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(2).gnabar_hh
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(-1).gnabar_hh
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(.5).pas.g
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
print sec(.5).g_pas
<class 'SyntaxError'> :  invalid syntax (<string>, line 1)
>>> samename.py
<built-in method ref of hoc.HocObject object at 0x5626b6db6660>
>>> same.py
True
True
True
True
True
False
>>> sec2cell.py
soma None
soma None
<__main__.PCell object at 0x55f8d45ab928>.soma <__main__.PCell object at 0x55f8d45ab928>
HCell[0].soma HCell[0]
HCell[0] HCell[0]
>>> secarg.py
<class 'TypeError'> :  sec is not a Section
soma
axon
dend[1]
soma
1.0
1.0
>>> secdelete1.py

|-|       __nrnsec_0x561608165d40(0-1)




|-|       __nrnsec_0x561608165da0(0-1)
   `|       __nrnsec_0x561608165e00(0-1)


|-|       __nrnsec_0x561608165e00(0-1)




|-|       <__main__.Cell object at 0x5616081648b8>.soma(0-1)
   `|       <__main__.Cell object at 0x5616081648b8>.axon(0-1)



>>> secinternal.py
nrniv: Invalid internal section name: __nrnsec_0x
 near line 1
 __nrnsec_0x { print secname() }
           ^
nrniv: Invalid internal section name: __nrnsec_0x
 near line 0
 ^
nrniv: Section associated with internal name does not exist: __nrnsec_0xaaaa
 near line 1
 __nrnsec_0xaaaa { print secname() }
               ^
nrniv: Section associated with internal name does not exist: __nrnsec_0xaaaa
 near line 0
 ^
nrniv: Section associated with internal name does not exist: __nrnsec_0x55fdf16c3310
 near line 0
 ^
__nrnsec_0x55fdf16c3310
s is s2 True
s is h.cas() True
s == h.cas() True
__nrnsec_0x55fdf16c3370
s5 is s4 False
s5 == s4 True
soma
s7 = h.__nrnsec_0x
<class 'NameError'>: __nrnsec_0x
s7 = h.__nrnsec_0xaaaa
<class 'NameError'>: __nrnsec_0xaaaa
__nrnsec_0x55fdf16c3310
__nrnsec_0x55fdf16c3310
print (h.__nrnsec_0x55fdf16c3310.L)
100.0
print (h.__nrnsec_0x55fdf16c3310.L)
<class 'NameError'>: __nrnsec_0x55fdf16c3310

|-|       __nrnsec_0x55fdf16c3310(0-1)
|-|       soma(0-1)
|-|       s6(0-1)

>>> seclist.py
s2
s3
>>> secname.py

|-|       soma(0-1)
  `|       __nrnsec_0x56391a65dab0(0-1)


|-|       soma(0-1)
  `|       __nrnsec_0x56391a65dab0(0-1)
|-|       <__main__.Cell1 object at 0x56391a5a13a8>.soma(0-1)
  `|       __nrnsec_0x56391a65db70(0-1)
|-|       Cell2_0.soma(0-1)
  `|       __nrnsec_0x56391a65dc30(0-1)
|-|       Cell2_1.soma(0-1)
  `|       __nrnsec_0x56391a65dcf0(0-1)
|-|       Cell2_2.soma(0-1)
  `|       __nrnsec_0x56391a65ddb0(0-1)

>>> secparent.py
child(0) parent: parent[1](0.5) trueparent: parent[1](0.5)

|---|       root(0-1)
 `--|       parent[0](0-1)
   `--|       parent[1](0-1)
     `--|       child(0-1)

>>> Traceback (most recent call last):
  File "secparent.py", line 68, in <module>
    child.connect(parent[np-1](pa[np-1]), co)
ValueError: segment position range is 0 <= x <= 1
seesec.py
0.1
0.30000000000000004
0.5
0.7
0.8999999999999999
__nrnsec_0x555b295f9ad0 5 1000.0
	1 
soma { nseg=1  L=100  Ra=35.4
	/*location 0 attached to cell 0*/
	/* First segment only */
	insert morphology { diam=500}
	insert capacitance { cm=1}
}
__nrnsec_0x555b295f9ad0 { nseg=5  L=1000  Ra=35.4
	/*location 0 attached to cell 1*/
	/* First segment only */
	insert capacitance { cm=1}
	insert morphology { diam=500}
}
__nrnsec_0x555b295f9b30 { nseg=1  L=100  Ra=35.4
	/*location 0 attached to cell 2*/
	/* First segment only */
	insert morphology { diam=500}
	insert capacitance { cm=1}
}
>>> segion.py
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'dina_dv_', 'ena', 'ina', 'is_ion', 'nai', 'name', 'nao', 'segment']
50.0
50.0
>>> sl.py
__nrnsec_0x55db1f056fe0
__nrnsec_0x55db1f057160
__nrnsec_0x55db1f057100
__nrnsec_0x55db1f0570a0
__nrnsec_0x55db1f057040
__nrnsec_0x55db1f056fe0
__nrnsec_0x55db1f057040
__nrnsec_0x55db1f0570a0
__nrnsec_0x55db1f057100
__nrnsec_0x55db1f057160
__nrnsec_0x55db1f057100 __nrnsec_0x55db1f057100 __nrnsec_0x55db1f057100
True
True
4 4
True
__nrnsec_0x55db1f057160
__nrnsec_0x55db1f057100
__nrnsec_0x55db1f0570a0
__nrnsec_0x55db1f057040

|-|       __nrnsec_0x55db1f056fe0(0-1)
   `|       __nrnsec_0x55db1f057040(0-1)
 `|       __nrnsec_0x55db1f0570a0(0-1)
 `|       __nrnsec_0x55db1f057100(0-1)
 `|       __nrnsec_0x55db1f057160(0-1)

>>> slseq.py
s0
s1
s2

(s0, s0)
(s0, s1)
(s0, s2)
(s1, s0)
(s1, s1)
(s1, s2)
(s2, s0)
(s2, s1)
(s2, s2)

(s0, s0)
(s0, s1)
(s0, s2)
(s1, s0)
(s1, s1)
(s1, s2)
(s2, s0)
(s2, s1)
(s2, s2)
('number of SectionList', 0)
List[0] with 2 refs
Vector[0] with 1 refs
>>> sr.py
axon
dend[2]
dend[1]
dend[0]

|-|       soma(0-1)
   `|       dend[0](0-1)
   `|       dend[1](0-1)
   `|       dend[2](0-1)
 `|       axon(0-1)

axon
dend[2]
dend[1]
dend[0]
>>> stdio_redir_string.py
nrniv: Couldn't find: test.hoc
 near line 0
 objref hoc_obj_[2]
                   ^
load_file failed. Following is contents of mystderr.getvalue()...

>>> stkbug.py
True
True
>>> subclass.py
True
True
True
True
True
True
True
True
True
True
True
>>> test1.py
scalar get tests
goodbye
scalar set tests
function tests
4 5 6 
4 5 6 
object component tests
0	10	20	30	40	

6 
array tests
25 
 0        1        2        3        4       
 10       11       12       13       14      
 20       21       22       23       24      
 0        1        2        3        4       
 10       11       12       13       14      
 20       21       22       123      24      
121 
soma
inside p
2 
x=1 str=begin o=NULLobject
 0 0 0
 NULLobject NULLobject NULLobject
x=2 str=reset o=Vector[5]
 10 11 12
 Vector[6] Vector[7] Vector[8]
nrniv: must be one argument for sin
 near line 0
 objref oa[3]
             ^
nrniv: must be one argument for sin
 near line 0
 ^
bad stack access: expecting (double); really (char *)
nrniv: interpreter stack type error
 near line 0
 ^
        printf("%d
", "from python")
<TopLevelHocInterpreter>
2.0
test hoc string
Vector[0]
5.0
from python
List[0]
printf()
4.0
4.0
1.0
0.4636476090008061
5.0
30.0
23.0
21.0
more function tests
List[1]
3
210.0
soma
python label
0.0
stim.dur =  2.0
common errors
print (h.foo)
<class 'AttributeError'> :  'hoc.HocObject' object has no attribute 'foo'
h.foo = 5
<class 'LookupError'> :  'foo' is not a defined hoc variable name.
print (h.vec.foo)
<class 'AttributeError'> :  'hoc.HocObject' object has no attribute 'foo'
h.vec = 5
h.vec.x = 5
<class 'AttributeError'> :  'int' object has no attribute 'x'
print (h.vec[1])
<class 'TypeError'> :  'int' object is not subscriptable
h.vec[1] = 5
<class 'TypeError'> :  'int' object does not support item assignment
print (h.vec.x[1][2])
<class 'AttributeError'> :  'int' object has no attribute 'x'
h.vec = h.m.x
<class 'TypeError'> :  argument cannot be a hoc object intermediate
h.vec = h.m.x[1]
<class 'TypeError'> :  argument cannot be a hoc object intermediate
h.m = 5
h.m[1] = 5
<class 'TypeError'> :  'int' object does not support item assignment
h.m.x = 5
<class 'AttributeError'> :  'int' object has no attribute 'x'
h.m.x = "error"
<class 'AttributeError'> :  'int' object has no attribute 'x'
h.m.x = h.vec
<class 'AttributeError'> :  'int' object has no attribute 'x'
h.m.x[1] = 5
<class 'AttributeError'> :  'int' object has no attribute 'x'
h.m.x[1][1][1] = 5
<class 'AttributeError'> :  'int' object has no attribute 'x'
h.xx[1] = 4
<class 'TypeError'> :  wrong number of subscripts
h.xx[1][1][1] = 4
<class 'TypeError'> :  'float' object does not support item assignment
print (h.xx[1][1][1])
<class 'TypeError'> :  'float' object is not subscriptable
h.xx = 4
<class 'TypeError'> :  wrong number of subscripts
h.f = 1
<class 'TypeError'> :  not assignable
h.f(1,2,3) = 1
<class 'SyntaxError'> :  can't assign to function call (<string>, line 1)
2.0 reset Vector[5] 10.0 Vector[6]
more errors
a.x = a.str
<class 'TypeError'> :  must be real number, not str
a.x = a.xa
<class 'TypeError'> :  must be real number, not hoc.HocObject
a.x = a.o
<class 'TypeError'> :  must be real number, not hoc.HocObject
a.x = a.oa
<class 'TypeError'> :  must be real number, not hoc.HocObject
a.x = a.oa[1]
<class 'TypeError'> :  must be real number, not hoc.HocObject
2.0
a.str = a.x
<class 'TypeError'> :  argument must be str, not float
a.str = a.o
<class 'TypeError'> :  argument must be str, not hoc.HocObject
a.str = a.xa[1]
<class 'TypeError'> :  argument must be str, not float
a.str = a.oa
<class 'TypeError'> :  argument must be str, not hoc.HocObject
a.str = a.oa[1]
<class 'TypeError'> :  argument must be str, not hoc.HocObject
reset
a.o = a.x
<class 'TypeError'> :  argument must be hoc.HocObject, not float
a.o = a.str
<class 'TypeError'> :  argument must be hoc.HocObject, not str
a.o = a.xa[1]
<class 'TypeError'> :  argument must be hoc.HocObject, not float
a.o = a.oa
<class 'TypeError'> :  argument cannot be a hoc object intermediate
a.oa[1] = h.m.x
<class 'AttributeError'> :  'int' object has no attribute 'x'
Vector[5]
None
h.sin(1,2)
<class 'RuntimeError'> :  hoc error
h.sin()
<class 'RuntimeError'> :  hoc error
h.printf("%d\n", h.str)
<class 'RuntimeError'> :  hoc error
>>> test2.py
axon
dend[?]
dend[1]
dend[1]
h.axon = 1
<class 'TypeError'> :  not assignable
h.dend[1] = 1
<class 'TypeError'> :  not assignable
<TopLevelHocInterpreter>
axon
axon
axon(0.5)
hh
hh
0.12
>>> test3.py
Cell[0].axon
Cell[0].dend[?]
Cell[0].dend[1]
Cell[0].dend[1]
c.axon = 1
<class 'TypeError'> :  not assignable
c.dend[1] = 1
<class 'TypeError'> :  not assignable
Cell[0]
Cell[0].axon
Cell[0].axon
Cell[0].axon(0.5)
hh
hh
0.12
Cell[0].dend[1]
Cell[0].dend[1](0.5)
pas
pas
0.001
>>> test4.py
None
>>> test5.py
True
True
True
True
True
>>> test6.py
h.setpointer(s(.5)._ref_v, "foo", f)
<class 'TypeError'>: setpointer(_ref_hocvar, 'POINTER_name', point_process or nrn.Mechanism))
f._ref_foo = s(.5)._ref_v
<class 'TypeError'>: must be real number, not hoc.HocObject
f.foo = s(.5)._ref_v
<class 'TypeError'>: must be real number, not hoc.HocObject
>>> testeval.py
[1, 2, 3]
[1, 2, 3]
>>> testext2.py
>>> testext.py
hello
	1 
>>> testref2.py
10
10.0
2.0 10
2.0 20
h._ref_x
<class 'AttributeError'>: 'hoc.HocObject' object has no attribute '_ref_x'
h._ref_sin
<class 'TypeError'>: Hoc pointer error, sin is not a hoc variable or range variable
<pointer to hoc scalar 5>
5.0 5.0
6.0 6.0
7.0 7.0
2 1.0
<pointer to hoc scalar 1>
3.0 2 3.0
<pointer to hoc scalar 0>
20.0 30.0
0	1	20	3	4	

0	1	20	30	4	

>>> testref.py
<hoc ref value 5>
<hoc ref value 2>
2.0
3.0
<hoc ref value "hello">
<hoc ref value "goodbye">
goodbye
another
<hoc ref value "PythonObject[0]">
<hoc ref value "List[0]">
List[0]
[1, 2, 3]
>>> topdict.py
Wrap to allow call by reference in a hoc function
Return the currently accessed section.
Return iterator over all sections.
Return a new Section
Assign hoc variable address to NMODL POINTER

No docstring available for the class member 'IClamp.get_segment'

Try checking the online documentation at:
https://www.neuron.yale.edu/neuron/static/py_doc/index.html

==================================================

Syntax:
    ``stimobj = h.IClamp(section(x))``


    ``delay -- ms``


    ``dur -- ms``


    ``amp -- nA``


    ``i -- nA``


Description:
    See `<nrn src dir>/src/nrnoc/stim.mod <https://github.com/neuronsimulator/nrn/blob/master/src/nrnoc/stim.mod>`_


    Single pulse current clamp point process. This is an electrode current 
    so positive amp depolarizes the cell. i is set to amp when t is within 
    the closed interval delay to delay+dur. Time varying current stimuli can 
    be simulated by setting delay=0, dur=1e9 and playing a vector into amp 
    with the :meth:`~Vector.play` :class:`Vector` method. 


.. note::


    In HOC, ``delay`` was known as ``del``, but this had to be renamed for Python as ``del``
    is a Python keyword.


    

success
[s0, s1, s2, s3, s4]
s0
s1
s2
s3
s4
True
>>> units.py
t ms
dt ms
celsius degC
v mV
Ra ohm-cm
gnabar_hh S/cm2
ina mA/cm2
nao mM
nai mM
ena mV
ExpSyn.g uS
ExpSyn.i nA
ExpSyn.e mV
a inch
>>> vecpkl.py
True
0	1	2	
0	1	2	
>>> vecpy.py
range(0, 1000000)                        8.13e-05
h.Vector(a)                              0.269
v.from_python(a)                         0.263
v.sum()                                  0.00171
499999500000.0
v.to_python()                            0.0921
1000000
numpy.arange(0, 10, .00001)              0.00959
no numpy
v.from_python(x for x in range(1, 1000000)) 0.182
[x for x in v]                           0.139
>>> vecpyref.py
[0. 1. 2. 3. 4.]
[0. 1. 2. 3. 4.]
0	1	2	3	4	

0	1	25	3	4	

>>> xpanel.py
enter 1 NULLobject hello
2.0 List[0] goodbye
	1 
>>> 