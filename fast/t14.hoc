// gap junction with setup_transfer

{load_file("stdrun.hoc")}

begintemplate Cell
public soma, s, vv, tv, pr, gap
create soma
objref s, this, vv, tv, gap
proc init() {
        vv = new Vector()
        tv = new Vector()
    soma {
        L = 10  diam=100/(PI*L)  insert hh
        s = new IClamp(.5)
	gap = new HalfGap(.5)
	gap.r = 200
	tv.record(&t)
	vv.record(&v(.5))
    }
}
proc pr() {local i
        printf("\n%s\n", this)
        for i=0, tv.size-1 {
                printf("%.15g %.15g\n", tv.x[i], vv.x[i])
        }
}
endtemplate Cell

n=2
objref cell[n]
for i=0, n-1 {cell[i] = new Cell(i)}
cell[0].s.dur = .1
cell[0].s.amp = .3

objref pc
pc = new ParallelContext()
for i=0, n-1 {
	pc.source_var(&cell[i].soma.v(.5), i)
	pc.target_var(&cell[(i+1)%2].gap.vgap, i)
}
//if (execute1("{pc.nthread(2,1)}",0) == 0) {printf("%d\n", 2) quit()}
{pc.setup_transfer()}

{hoc_stdout("temp")}
{printf("fixed step\n")}
run()
for i=0, n-1 cell[i].pr()
{cvode_active(1)}
{printf("cvode\n")}
run()
for i=0, n-1 cell[i].pr()
{hoc_stdout()}

strdef s
{system("cmp temp t14.stdout", s)}
b = (strcmp(s, "") == 0)
